type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  owner: String!
  uWindsorEmail: String
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  firstName: String
  lastName: String
  intro: String
  major: String
  avatarImgPath: String
  backGroundImgPath: String
  linkedin: String
  github: String
  tags: [String]
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
        { allow: private, operations: [read] }
        { allow: public, operations: [read], provider: iam }
      ]
    )
  userEducations: [UserEducation] @connection(keyName: "byUser", fields: ["id"])
  userExperiences: [UserExperience]
    @connection(keyName: "byUser", fields: ["id"])
  marketUserInfo: [MarketUserInfo]
    @connection(keyName: "byUser", fields: ["id"])
}

type UserEducation
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  school: String!
  degree: String
  fieldOfStudy: String
  startDate: AWSDateTime!
  endDate: AWSDateTime
  grade: Int
  description: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}
type UserExperience
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  employmentType: String
  companyName: String!
  location: String
  startDate: AWSDateTime!
  endDate: AWSDateTime
  industry: String
  description: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type Topic
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  like: [String]!
  unlike: [String]!
  articles: [Article] @connection(keyName: "byTopic", fields: ["id"])
}

type Type
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  like: [String]!
  unlike: [String]!
  articles: [Article] @connection(keyName: "byType", fields: ["id"])
}

type Article
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "articleByCreatedAt"
    fields: ["ByCreatedAt", "active", "createdAt"]
    queryField: "articleByCreatedAt"
  )
  @key(name: "byTopic", fields: ["topicID"])
  @key(name: "byType", fields: ["typeID"]) {
  id: ID!
  title: String!
  content: String!
  imagePath: String
  like: [String]!
  unlike: [String]!
  topicID: ID!
  topic: Topic! @connection(fields: ["topicID"])
  typeID: ID!
  active: Int!
  type: Type! @connection(fields: ["typeID"])
  articleComments: [ArticleComment]
    @connection(keyName: "byArticle", fields: ["id"])
  createdAt: AWSDateTime!
  ByCreatedAt: String! #用来当第二索引的
}

type ArticleComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byArticleID"
    fields: ["articleID", "active", "createdAt"]
    queryField: "byArticleID"
  )
  @key(name: "byArticle", fields: ["articleID", "createdAt"]) {
  id: ID!
  content: String!
  like: [String]!
  unlike: [String]!
  active: Int!
  articleID: ID!
  article: Article! @connection(fields: ["articleID"])
  createdAt: AWSDateTime!
}

type Department
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  introduction: String
  email: String
  leader: String
  like: [String]!
  unlike: [String]!
  uwcssaJobs: [UwcssaJob] @connection(keyName: "byDepartment", fields: ["id"])
}

type UwcssaJob
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byDepartmentID"
    fields: ["departmentID", "active", "createdAt"]
    queryField: "byDepartmentID"
  )
  @key(name: "byDepartment", fields: ["departmentID", "createdAt"]) {
  id: ID!
  introduction: String!
  title: String!
  requirements: [String]!
  bonus: [String]!
  imagePath: String
  departmentID: ID!
  department: Department @connection(fields: ["departmentID"])
  benefits: [String]!
  schedule: [String]!
  like: [String]!
  unlike: [String]!
  active: Int!
  createdAt: AWSDateTime!
  uwcssaJobResumes: [UwcssaJobResume]
    @connection(keyName: "byUwcssaJob", fields: ["id"])
}

type UwcssaJobResume
  @model
  @auth(
    rules: [
      { allow: owner } # 需要改只能上传和查看
      { allow: groups, groups: ["admin", "staff"] }
      # { allow: private, operations: [read] }
      # { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byUwcssaJobID"
    fields: ["uwcssaJobID", "createdAt"]
    queryField: "byUwcssaJobID"
  )
  @key(name: "byUwcssaJob", fields: ["uwcssaJobID", "createdAt"]) {
  id: ID!
  name: String!
  email: String!
  resumeFilePath: String
  phone: String!
  message: String
  createdAt: AWSDateTime!
  uwcssaJobID: ID!
  uwcssaJob: UwcssaJob! @connection(fields: ["uwcssaJobID"])
  uwcssaJobResumeStatus: UwcssaJobResumeStatus!
}

enum UwcssaJobResumeStatus {
  pending
  inProgress
  finish
}

type ForumTopic
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  like: [String]!
  unlike: [String]!
  forumSubTopics: [ForumSubTopic]!
    @connection(keyName: "byForumTopic", fields: ["id"])
}

type ForumSubTopic
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byForumTopic", fields: ["forumTopicID", "createdAt"]) {
  id: ID!
  name: String!
  like: [String]!
  unlike: [String]!
  active: Int!
  forumTopicID: ID!
  forumTopic: ForumTopic! @connection(fields: ["forumTopicID"])
  forumPosts: [ForumPost]!
    @connection(keyName: "byForumSubTopic", fields: ["id"])
  createdAt: AWSDateTime!
}

type ForumPost
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byForumSubTopicID"
    fields: ["forumSubTopicID", "active", "createdAt"]
    queryField: "byForumSubTopicID"
  )
  @key(name: "byForumSubTopic", fields: ["forumSubTopicID", "createdAt"]) {
  id: ID!
  title: String!
  content: String!
  imagePath: String
  like: [String]!
  unlike: [String]!
  createdAt: AWSDateTime!
  active: Int!
  forumSubTopicID: ID!
  forumSubTopic: ForumSubTopic! @connection(fields: ["forumSubTopicID"])
  forumPostComments: [ForumPostComment]!
    @connection(keyName: "byForumPost", fields: ["id"])
}

type ForumPostComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byForumPostID"
    fields: ["forumPostID", "active", "createdAt"]
    queryField: "byForumPostID"
  )
  @key(name: "byForumPost", fields: ["forumPostID", "createdAt"]) {
  id: ID!
  content: String!
  like: [String]!
  unlike: [String]!
  createdAt: AWSDateTime!
  active: Int!
  forumPostID: ID!
  forumPost: ForumPost! @connection(fields: ["forumPostID"])
  forumPostSubComments: [ForumPostSubComment]!
    @connection(keyName: "byForumPostComment", fields: ["id"])
}

type ForumPostSubComment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "byForumPostCommentID"
    fields: ["forumPostCommentID", "createdAt"]
    queryField: "byForumPostCommentID"
  )
  @key(
    name: "byForumPostComment"
    fields: ["forumPostCommentID", "createdAt"]
  ) {
  id: ID!
  content: String!
  like: [String]!
  unlike: [String]!
  createdAt: AWSDateTime!
  forumPostCommentID: ID!
  forumPostComment: ForumPostComment!
    @connection(fields: ["forumPostCommentID"])
}

type MarketUserInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  phone: String
  weChat: String
  email: String
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type MarketItem
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketItemByCreatedAt"
    fields: ["ByCreatedAt", "active", "createdAt"]
    queryField: "marketItemByCreatedAt"
  ) {
  id: ID!
  name: String!
  imagePath: [String]!
  title: String!
  price: Int
  description: String
  location: String
  marketItemCondition: MarketItemCondition!
  marketItemCategory: MarketItemCategory!
  tags: [String]
  active: Int!
  createdAt: AWSDateTime!
  ByCreatedAt: String!
}

enum MarketItemCondition {
  New
  UsedLikeNew
  UsedGood
  UsedFair

  Other
}

enum MarketItemCategory {
  Tools
  Furniture
  HouseHold
  Garden
  Appliances

  VideoGames
  BooksMoviesMusic

  BagsLuggage
  WomensClothingShoes
  MensClothingShoes
  JewelryAccessories

  HealthBeauty
  PetSupplies
  BabyKids
  ToysGames

  ElectronicsComputers
  MobilePhones

  Bicycles
  ArtsCrafts
  SportsOutdoors
  AutoParts
  MusicalInstruments
  AntiquesCollectibles

  GarageSale
  Miscellaneous

  Other
}

type MarketVehicle
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketVehicleByCreatedAt"
    fields: ["ByCreatedAt", "active", "createdAt"]
    queryField: "marketVehicleByCreatedAt"
  ) {
  id: ID!
  vehicleType: VehicleType!
  imagePath: [String]!
  location: String
  year: Int!
  make: String!
  model: String!
  exteriorColor: String
  interiorColor: String
  fuelType: String
  price: Int
  description: String
  active: Int!
  createdAt: AWSDateTime!
  ByCreatedAt: String!
  #tag
}

enum VehicleType {
  CarTruck
  Motorcycle
  PowerSport
  RVCamper
  Trailer
  Other
}

type MarketHome
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin", "staff"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  )
  @key(
    name: "marketHomeByCreatedAt"
    fields: ["ByCreatedAt", "active", "createdAt"]
    queryField: "marketHomeByCreatedAt"
  ) {
  id: ID!
  imagePath: [String]!
  marketHomeSaleRent: MarketHomeSaleRent!
  propertyType: PropertyType!
  bedroomCounts: Int
  bathroomsCounts: Int
  price: Int
  address: String
  description: String
  propertySize: Int
  dateAvailable: AWSDateTime
  laundryType: LaundryType
  airConditionType: AirConditionType
  heatingType: HeatingType
  catFriendly: Boolean
  dogFriendly: Boolean
  active: Int!
  createdAt: AWSDateTime!
  ByCreatedAt: String!
}

enum MarketHomeSaleRent {
  Rent
  ForSale
  Other
}

enum PropertyType {
  Apartment
  House
  RoomOnly
  Townhouse
  Other
}
enum LaundryType {
  InUnitLaundry
  LaundryInBuilding
  LaundryAvailable
  None
  Other
}

enum AirConditionType {
  CentralAC
  ACAvailable
  None
  Other
}

enum HeatingType {
  CentralHeating
  ElectricHeating
  GasHeating
  RadiatorHeating
}
